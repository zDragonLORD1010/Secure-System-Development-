def decode_utf8_custom(input_bytes):
    output = []
    i = 0
    while i < len(input_bytes):
        byte = input_bytes[i]
        
        # 4-byte sequence (11110xxx)
        if (byte >> 3) == 0b11110:
            if i + 3 >= len(input_bytes):
                break  # Incomplete sequence
            decoded = ((input_bytes[i + 2] & 0x3F) << 6) | (input_bytes[i + 3] & 0x3F)
            output.append(decoded & 0xFF)  # Truncate to 1 byte
            i += 4
            
        # 3-byte sequence (1110xxxx)
        elif (byte >> 4) == 0b1110:
            if i + 2 >= len(input_bytes):
                break
            decoded = ((input_bytes[i + 1] & 0x3F) << 6) | (input_bytes[i + 2] & 0x3F)
            output.append(decoded & 0xFF)
            i += 3
            
        # 2-byte sequence (110xxxxx)
        elif (byte >> 5) == 0b110:
            if i + 1 >= len(input_bytes):
                break
            decoded = ((byte & 0x1F) << 6) | (input_bytes[i + 1] & 0x3F)
            output.append(decoded & 0xFF)
            i += 2
            
        # 1-byte ASCII (0xxxxxxx)
        else:
            output.append(byte)
            i += 1
            
        # Stop at null terminator
        if output and output[-1] == 0:
            break
            
    return bytes(output)

# Raw bytes from DAT_00402008 (first 28 bytes)
encoded_data = bytes([
0xe0, 0x81, 0x89, 0xc0, 0xa0, 0xc1, 0xae, 0xe0, 0x81, 0xa5, 0xc1, 0xb6,
0xf0, 0x80, 0x81, 0xa5, 0xe0, 0x81, 0xb2, 0xf0, 0x80, 0x80, 0xa0, 0xe0,
0x81, 0xa2, 0x72, 0x6f, 0xc1, 0xab, 0x65, 0xe0, 0x80, 0xa0, 0xe0, 0x81,
0xb4, 0xe0, 0x81, 0xa8, 0xc1, 0xa5, 0x20, 0xc1, 0xa5, 0xe0, 0x81, 0xae,
0x63, 0xc1, 0xaf, 0xe0, 0x81, 0xa4, 0xf0, 0x80, 0x81, 0xa9, 0x6e, 0xc1,
0xa7, 0xc0, 0xba, 0x20, 0x49, 0xf0, 0x80, 0x81, 0x9f, 0xc1, 0xa1, 0xc1,
0x9f, 0xc1, 0x8d, 0xe0, 0x81, 0x9f, 0xc1, 0xb4, 0xf0, 0x80, 0x81, 0x9f,
0xf0, 0x80, 0x81, 0xa8, 0xc1, 0x9f, 0xf0, 0x80, 0x81, 0xa5, 0xe0, 0x81,
0x9f, 0xc1, 0xa5, 0xe0, 0x81, 0x9f, 0xf0, 0x80, 0x81, 0xae, 0xc1, 0x9f,
0xf0, 0x80, 0x81, 0x83, 0xc1, 0x9f, 0xe0, 0x81, 0xaf, 0xe0, 0x81, 0x9f,
0xc1, 0x84, 0x5f, 0xe0, 0x81, 0xa9, 0xf0, 0x80, 0x81, 0x9f, 0x6e, 0xe0,
0x81, 0x9f, 0xe0, 0x81, 0xa7, 0xe0, 0x81, 0x80, 0xf0, 0x80, 0x81, 0xa6,
0xf0, 0x80, 0x81, 0xac, 0xe0, 0x81, 0xa1, 0xc1, 0xb2, 0xc1, 0xa5, 0xf0,
0x80, 0x80, 0xad, 0xf0, 0x80, 0x81, 0xaf, 0x6e, 0xc0, 0xae, 0xf0, 0x80,
0x81, 0xa3, 0x6f, 0xf0, 0x80, 0x81, 0xad, 0x00
])

# Decode and print
decoded = decode_utf8_custom(encoded_data)
print("Decoded:", decoded.decode('ascii', errors='replace'))
